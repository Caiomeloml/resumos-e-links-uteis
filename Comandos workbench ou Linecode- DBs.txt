
-- Alguns comandos basicos (MySQL) DOS e WORKBENCH


--mostra DataBases existentes no BD
SHOW DATABASES;

--cria base de dados dentro do BD
CREATE DATABASE nomedobd;

-- create database se nao existir;
CREATE SCHEMA IF NOT EXISTS nomedoschema ou bd;

--entra no BD para verificar TABLES ou configurar
USE nomedobd;

--mostra tabelas existentes dentro do BD
SHOW TABLES;

-- Cria Tabela (nome)
CREATE TABLE nometable;
EX:
CREATE TABLE employee(
	Fname varchar(15) not null,
    Minit char,
    Lname varchar(15) not null,
    Ssn char(9) not null, 
    Bdate date,
    Address varchar(30),
    Sex char,
    Salary decimal(10,2),
    Super_ssn char(9),
    Dno int not null,
    constraint pk_employee primary key (Ssn)
);

-- selecionar e observa conteudo da tabela
select * from nomedatabela 

--descreve table
DESC nomedotable;

-- apaga o BD ou table
DROP DATABASE nomedobdOUtable;

-- Adicionar item na table
ALTER TABLE nomedatable ADD nomequequeroadd VARCHAR(11); ou DATE ou item que quero adicinar.

-- Remover coluna da table
ALTER TABLE nomedatable DROP COLUMN nomedoitem

-- Modificar coluna ou tipo de dados
ALTER TABLE nome_tabela MODIFY COLUMN nome_atributo tipo_dados CONDICAO;

--Adicionar constraint
ALTER TABLE nome_tabela ADD contraint_nome CONDICOES;

-- inserir dados no bd
nomedatabela Values ('valores referentes as colums') ex:
INSERT INTO dept_locations VALUES (1, 'Houston' dando match com tabelas criadas);

-- Alterar dados
UPDATE nometable SET nome_coluna='nomequeesta'

-- Atributos basicos para consultar tabelas:
SELECT <attribute list>
FROM <table list>
[ WHERE <condition>]
[ ORDER BY <attribute list> ];


ORDER BY - ordenar na ordem que escolho
GROUP BY  - Agrupa colunas repetidas


exemplo de casos:
--BD nome =  empresaaa_constraintsss
-- Table nomes = employee, departament, dept_location, project, works_on, dependent



--consulta as constrains (primary key, foreing key, outras constrains) do BD
select * from information_schema.table_constraints
	where constraint_schema = 'Nome do Banco de dados';


-- alterar Foreing constraint
alter table departament drop departament_ibfk_1;
    alter table departament
		add constraint fk_dept foreign key(Mgr_ssn) references employee(Ssn) 
        on update cascade;


-- retira a ambiguidade através do alias ou As Statement  ou abreviar nome
select * from departament, dept_locations where Dnumber = Dnumber; -- erro de ambiguidade

-- usando alias   AS    especificando a tabela ( departament AS d, dept_locations AS l)

SELECT Dname AS Department_name
	FROM departament AS d, dept_locations AS l
    WHERE d.Dnumber = l.Dnumber;

  
-- Renomear Titulo da coluna EX: Fname e Fname e adress e Bdate (tabela com esses dados e o nome que eu escolher)
select concat (Fname, ' ', Lname, ' ', salary) as NOMEDEESCOLHA from employee; 

-- Solicitar tabela com a ordem de escolha
select * from employee ORDER BY Fname; 

-- Tira redundancia usando DISTINCT
SELECT DISTINCT d.Dname, CONCAT(e.Fname,'',e.Lname) AS Manager, Adress
	FROM departament as d, employee as e, works_on as w, project as p
	WHERE (d.Dnumber = e.Dno and e.Ssn=d.Mgr_ssn and w.Pno = p.Pnumber)
    ORDER BY d.Dname, e.Fname, e.Lname;

-- Ordenar na ordem de:  ORDER BY
SELECT DISTINCT d.Dname, CONCAT(e.Fname,'',e.Lname) AS Manager, Adress
	FROM departament as d, employee as e, works_on as w, project as p
	WHERE (d.Dnumber = e.Dno and e.Ssn=d.Mgr_ssn and w.Pno = p.Pnumber)
    ORDER BY d.Dname, e.Fname, e.Lname;



-- Funções e clasusas de agrupamento
-- conta o numero de tabelas
select count(*) from employee;

 -- contando a media salarial dos employee
select Dno, count(*), avg(Salary) from employee
	group by Dno;



select Dno, count(*) AS Number_of_employee, round(avg(salary),2) as Salary_avg from employee
group by Dno;



---   HAVING Satement
Select : seleciona tabela e atributos
GROUP BY: grupos de valores
HAVING: Filtragem dos grupos

ex: Select Pnumber, Pname, COUNT(*) FROM Project, WORKS_ON 
WHERE Pnumber = Pno
GROUP BY Pnumber,Pname
Having Count (*)>2;









            ---     JOIN STATEMENT  ---

RIGHT JOIN = Tudo que tem na tabela direita + match da outra
LEFT JOIN  = Tudo que tem na tabela esquerda + match da outra
OUTER JOIN  = Tudo que tiver nas duas tabelas
INNER JOIN = Apenas os itens que tem nas duas tabelas
ANTI RIGHT JOIN = Apenas as coisas da tabela direita sem os itens match(emcomun com a outra tabela
ANTI LEFT JOIN = Apenas as coisas da tabela esquerda sem os itens emcomun com a outra tabela
ANTI OUTER JOIN = tudo que tem nas tabelas EXCETO os intens em match(coisas emcomum)
OUTER JOIN = Tudo das duas tabelas



Criando Queries com CASE Statement 
-- possivel alterar varias tabelas simultaneamente
EX:

UPDATE employee set salary =
	case
		WHEN Dno=5 then salary + 2000
        when Dno=4 then salary + 1500
        when Dno=1 then salary + 3000
        else Salary + 0
	end;

OBS: foi preciso desabilitar SafeMode:
File> SQL Editor> Other (Safe Updates( # rejects UPDATEs and DELETEs with no restrictions)



-- valores numericos (somar +, subtrair -, dividir / ou multiplicar *) ROUND(coluna com numeros*valor, casanumericas)

     select concat( Fname, ' ',Lname) as NOME, Dname as departamento,  Dlocation as Localização,
     Salary as Salario, ROUND(Salary*0.5,2) as Bonus  from departament
		inner join dept_locations using(Dnumber)
        inner join employee on Ssn = Mgr_ssn;



-- INNER JOIN Juntar tabelas

Select * from employee;
select * from dependet;

juntando as duas tabelas acima
select * from dependet inner join employee;


